{"ast":null,"code":"var _jsxFileName = \"/Users/unix/Documents/Projects/React/todo/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { AddTask } from \"./Components/AddTask\";\nimport { TaskList } from \"./Components/TaskList\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [tasks, setTasks] = useState([{\n    id: 1,\n    text: \"Task 1\",\n    isComplete: false\n  }]);\n\n  const addTask = text => {\n    if (text !== \"\" && text !== null) {\n      const newTask = {\n        id: tasks.length + 1,\n        text,\n        isComplete: false\n      };\n      setTasks([...tasks, newTask]);\n    } else {\n      alert(\"Task cannot be empty\");\n    }\n  };\n\n  const complete = (choosenTask, isComplete) => {\n    setTasks(tasks.map(task => {\n      if (task.id === choosenTask.id) {\n        return { ...task,\n          isComplete: !task.isComplete\n        };\n      }\n\n      return task;\n    }));\n    console.log(tasks);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: /*#__PURE__*/_jsxDEV(AddTask, {\n        addTask: addTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task__list\",\n      children: /*#__PURE__*/_jsxDEV(TaskList, {\n        tasks: tasks,\n        complete: complete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"hC/Z3TPKRpFJzLi1dnjFAHT+zdk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/unix/Documents/Projects/React/todo/src/App.js"],"names":["AddTask","TaskList","useState","App","tasks","setTasks","id","text","isComplete","addTask","newTask","length","alert","complete","choosenTask","map","task","console","log"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,OAAT,QAAwB,sBAAxB;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,CACjC;AAAEI,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,QAAf;AAAyBC,IAAAA,UAAU,EAAE;AAArC,GADiC,CAAD,CAAlC;;AAIA,QAAMC,OAAO,GAAIF,IAAD,IAAU;AACxB,QAAIA,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,IAA5B,EAAkC;AAChC,YAAMG,OAAO,GAAG;AAAEJ,QAAAA,EAAE,EAAEF,KAAK,CAACO,MAAN,GAAe,CAArB;AAAwBJ,QAAAA,IAAxB;AAA8BC,QAAAA,UAAU,EAAE;AAA1C,OAAhB;AACAH,MAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWM,OAAX,CAAD,CAAR;AACD,KAHD,MAGO;AACLE,MAAAA,KAAK,CAAC,sBAAD,CAAL;AACD;AACF,GAPD;;AASA,QAAMC,QAAQ,GAAG,CAACC,WAAD,EAAcN,UAAd,KAA6B;AAC5CH,IAAAA,QAAQ,CACND,KAAK,CAACW,GAAN,CAAWC,IAAD,IAAU;AAClB,UAAIA,IAAI,CAACV,EAAL,KAAYQ,WAAW,CAACR,EAA5B,EAAgC;AAC9B,eAAO,EAAE,GAAGU,IAAL;AAAWR,UAAAA,UAAU,EAAE,CAACQ,IAAI,CAACR;AAA7B,SAAP;AACD;;AACD,aAAOQ,IAAP;AACD,KALD,CADM,CAAR;AAQAC,IAAAA,OAAO,CAACC,GAAR,CAAYd,KAAZ;AACD,GAVD;;AAYA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACE,QAAC,OAAD;AAAS,QAAA,OAAO,EAAEK;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACE,QAAC,QAAD;AAAU,QAAA,KAAK,EAAEL,KAAjB;AAAwB,QAAA,QAAQ,EAAES;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GApCQV,G;;KAAAA,G;AAsCT,eAAeA,GAAf","sourcesContent":["import \"./App.css\";\nimport { AddTask } from \"./Components/AddTask\";\nimport { TaskList } from \"./Components/TaskList\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [tasks, setTasks] = useState([\n    { id: 1, text: \"Task 1\", isComplete: false },\n  ]);\n\n  const addTask = (text) => {\n    if (text !== \"\" && text !== null) {\n      const newTask = { id: tasks.length + 1, text, isComplete: false };\n      setTasks([...tasks, newTask]);\n    } else {\n      alert(\"Task cannot be empty\");\n    }\n  };\n\n  const complete = (choosenTask, isComplete) => {\n    setTasks(\n      tasks.map((task) => {\n        if (task.id === choosenTask.id) {\n          return { ...task, isComplete: !task.isComplete };\n        }\n        return task;\n      })\n    );\n    console.log(tasks);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"form\">\n        <AddTask addTask={addTask} />\n      </div>\n      <div className=\"task__list\">\n        <TaskList tasks={tasks} complete={complete} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}